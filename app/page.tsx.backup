"use client"
import NextImage from "next/image"
import { Header } from "../components/Header"
import { PropertyCard } from "@/components/property-card"
import { PropertyFilter } from "@/components/PropertyFilter"
import { CategorySection } from "@/components/category-section"
import { PropertyPreviewModal } from "@/components/PropertyPreviewModal"
import { LoginModal } from "@/components/LoginModal"
import { Footer } from "@/components/footer"
import { TasacionesSection } from "@/components/boost-section"
import { ExploreSection } from "@/components/explore-section"
import { TrendsSection } from "@/components/trends-section"
import { Propiedad } from "@/lib/services/propiedades"
import { useVisitas } from "@/lib/services/visitas"
import { useEffect, useState } from "react"
import { useAppSelector, useAppDispatch } from "@/lib/store/hooks"
import { fetchProperties } from "@/lib/store/propertiesSlice"
import { useRouter } from "next/navigation"
import { Building, HomeIcon, Calculator, Gavel, MapPin, FileText, Scale } from "lucide-react"
import { usePropertyNavigation } from "@/hooks/usePropertyNavigation"
import { Spinner } from '@/components/ui/spinner'

export default function Home() {
  const dispatch = useAppDispatch()
  const { properties, loading } = useAppSelector(state => state.properties)
  const { isAuthenticated, user } = useAppSelector(state => state.auth)
  const { openProperty, selectedProperty } = usePropertyNavigation()
  
  const [currentFilters, setCurrentFilters] = useState<any>(null)
  const [showLoginModal, setShowLoginModal] = useState(false)
  const [showPreview, setShowPreview] = useState(false)
  const [filteredProperties, setFilteredProperties] = useState<Propiedad[]>([])
  
  const router = useRouter()
  const { registrarVisitaPagina, registrarVisitaPropiedad } = useVisitas()

  // Funci√≥n para formatear el precio con la moneda de la propiedad
  const formatPrice = (price: string, moneda: any) => {
    return new Intl.NumberFormat('es-AR', {
      style: 'currency',
      currency: moneda?.codigo_iso || 'ARS'
    }).format(parseFloat(price))
  }

  // Funci√≥n para formatear solo el n√∫mero sin s√≠mbolo de moneda
  const formatPriceNumber = (price: string) => {
    return parseFloat(price).toLocaleString('es-AR', { minimumFractionDigits: 0 })
  }

  // Cargar propiedades al montar el componente
  useEffect(() => {
    dispatch(fetchProperties())
  }, [dispatch])

  // Inicializar filteredProperties cuando se cargan las propiedades
  useEffect(() => {
    if (properties.length > 0) {
      setFilteredProperties(properties)
    }
  }, [properties])

  // Registrar visita a la p√°gina principal solo una vez
  useEffect(() => {
    registrarVisitaPagina()
  }, [registrarVisitaPagina])

  // Mostrar el modal cuando hay una propiedad seleccionada
  useEffect(() => {
    setShowPreview(!!selectedProperty)
  }, [selectedProperty])

  // Funci√≥n para actualizar URL con filtros
  const updateUrlWithFilters = (filters: any) => {
    const params = new URLSearchParams()
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        params.set(key, String(value))
      }
    })
    router.replace(`?${params.toString()}`, { scroll: false })
  }

  // Funci√≥n para manejar los filtros
  const handleFilter = (filters: any) => {
    setCurrentFilters(filters)
    
    // Actualizar URL con filtros
    updateUrlWithFilters(filters)
    
    // Filtrado en el frontend
    const filtered = properties.filter(prop => {
      // Filtro por tipo de propiedad
      if (filters.tipo_propiedad && prop.tipo_propiedad.id !== filters.tipo_propiedad) return false
      
      // Filtro por operaci√≥n (Venta/Alquiler)
      if (filters.operacion && prop.estado_comercial.id !== filters.operacion) return false
      
      // Filtro por precio m√≠nimo
      if (filters.precio_min) {
        const precio = parseFloat(prop.precio)
        if (precio < parseFloat(filters.precio_min)) return false
      }
      
      // Filtro por precio m√°ximo
      if (filters.precio_max) {
        const precio = parseFloat(prop.precio)
        if (precio > parseFloat(filters.precio_max)) return false
      }
      
      // Filtro por ciudad
      if (filters.ciudad && prop.direccion?.ciudad !== filters.ciudad) return false
      
      // Filtro por dormitorios (solo para casas y departamentos)
      if (filters.dormitorios && (prop.tipo_propiedad.nombre === 'Casa' || prop.tipo_propiedad.nombre === 'Departamento')) {
        if (prop.dormitorios !== filters.dormitorios) return false
      }
      
      // Filtro por moneda
      if (filters.moneda && prop.moneda.id !== filters.moneda) return false
      
      return true
    })
    
    // Actualizar propiedades filtradas
    setFilteredProperties(filtered)
  }

  // Funci√≥n para manejar la selecci√≥n de una propiedad
  const handlePropertyClick = (property: Propiedad) => {
    openProperty(property)
    
    // Registrar visita a la propiedad
    registrarVisitaPropiedad(property.id)
  }

  // Redirigir al admin si est√° autenticado y es administrador
  useEffect(() => {
    if (isAuthenticated && user?.rol === 'administrador') {
      router.push('/admin')
    }
  }, [isAuthenticated, user, router])

  // Cargar filtros desde URL al montar el componente
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const searchParams = new URLSearchParams(window.location.search)
      const filtersFromUrl: any = {}
      
      // Mapear par√°metros de URL a filtros
      const urlFilters = {
        tipo_propiedad: searchParams.get('tipo_propiedad'),
        operacion: searchParams.get('operacion'),
        precio_min: searchParams.get('precio_min'),
        precio_max: searchParams.get('precio_max'),
        ciudad: searchParams.get('ciudad'),
        dormitorios: searchParams.get('dormitorios'),
        moneda: searchParams.get('moneda')
      }
      
      // Solo agregar filtros que tengan valor
      Object.entries(urlFilters).forEach(([key, value]) => {
        if (value) {
          filtersFromUrl[key] = value
        }
      })
      
      if (Object.keys(filtersFromUrl).length > 0) {
        setCurrentFilters(filtersFromUrl)
        // Aplicar filtros directamente sin actualizar URL
        const filtered = properties.filter(prop => {
          if (filtersFromUrl.tipo_propiedad && prop.tipo_propiedad.id !== filtersFromUrl.tipo_propiedad) return false
          if (filtersFromUrl.operacion && prop.estado_comercial.id !== filtersFromUrl.operacion) return false
          if (filtersFromUrl.precio_min && parseFloat(prop.precio) < parseFloat(filtersFromUrl.precio_min)) return false
          if (filtersFromUrl.precio_max && parseFloat(prop.precio) > parseFloat(filtersFromUrl.precio_max)) return false
          if (filtersFromUrl.ciudad && prop.direccion?.ciudad !== filtersFromUrl.ciudad) return false
          if (filtersFromUrl.dormitorios && (prop.tipo_propiedad.nombre === 'Casa' || prop.tipo_propiedad.nombre === 'Departamento')) {
            if (prop.dormitorios !== filtersFromUrl.dormitorios) return false
          }
          if (filtersFromUrl.moneda && prop.moneda.id !== filtersFromUrl.moneda) return false
          return true
        })
        setFilteredProperties(filtered)
      }
    }
  }, [properties]) // Se ejecuta cuando se cargan las propiedades

  return (
    <main className="min-h-screen">
      {/* Header */}
      <Header 
        variant="main"
        onLoginClick={() => setShowLoginModal(true)}
      />

      {/* Login Modal */}
      <LoginModal 
        isOpen={showLoginModal} 
        onClose={() => setShowLoginModal(false)} 
      />

      {/* Hero Section */}
      <section className="relative bg-gradient-to-r from-blue-600 to-blue-800 text-white py-20">
        <div className="w-full flex flex-col items-center px-2 md:px-8">
          <h1 className="text-4xl md:text-5xl font-bold mb-6 text-center">
            <span className="block">Te conectamos con la propiedad,</span>
            <span className="block">tus sue√±os la convierten en hogar üè†</span>
          </h1>
          <div className="text-sm mb-8 max-w-6xl mx-auto text-center font-medium flex flex-wrap justify-center items-center gap-4">
            <div className="flex items-center gap-1">
              <Building className="h-4 w-4" />
              <span>NEGOCIOS INMOBILIARIOS</span>
            </div>
            <span>‚Ä¢</span>
            <div className="flex items-center gap-1">
              <HomeIcon className="h-4 w-4" />
              <span>ADMINISTRACI√ìN DE ALQUILERES</span>
            </div>
            <span>‚Ä¢</span>
            <div className="flex items-center gap-1">
              <Calculator className="h-4 w-4" />
              <span>TASACIONES PRIVADAS, JUDICIALES Y BANCARIAS</span>
            </div>
            <span>‚Ä¢</span>
            <div className="flex items-center gap-1">
              <MapPin className="h-4 w-4" />
              <span>TASACIONES URBANAS Y RURALES</span>
            </div>
            <span>‚Ä¢</span>
            <div className="flex items-center gap-1">
              <Gavel className="h-4 w-4" />
              <span>PERICIAS Y DILIGENCIAS EN TRIBUNALES FEDERALES Y PROVINCIALES</span>
            </div>
          </div>
          <div className="w-full max-w-7xl mx-auto">
            <PropertyFilter onFilter={handleFilter} properties={properties} />
          </div>
        </div>
      </section>

      {/* Explore Properties Section */}
      {/* <CategorySection /> */}

      {/* Properties Section */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold mb-8 text-center">Propiedades</h2>
          {loading ? (
            <div className="flex justify-center items-center py-12">
              <Spinner size="lg" color="primary" showText text="Cargando propiedades..." />
            </div>
          ) : properties.length > 0 ? (
            <>
              {filteredProperties.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                  {filteredProperties.map((p) => (
                    <PropertyCard
                      key={p.id}
                      image={typeof p.imagenes[0] === 'string' ? p.imagenes[0] : p.imagenes[0]?.url ?? '/property1.jpg'}
                      price={formatPriceNumber(p.precio)}
                      moneda={p.moneda}
                      beds={p.dormitorios && p.dormitorios > 0 ? p.dormitorios : ''}
                      baths={p.banos && p.banos > 0 ? p.banos : ''}
                      sqft={p.superficie_m2 && parseFloat(p.superficie_m2) > 0 ? `${p.superficie_m2} m¬≤` : ''}
                      address={`${p.direccion?.calle ?? ''} ${p.direccion?.numero ?? ''}`}
                      city={`${p.direccion?.ciudad ?? ''}, ${p.direccion?.provincia ?? ''}${p.direccion?.barrio ? ` - ${p.direccion.barrio}` : ''}`}
                      status={p.estado_situacion.nombre}
                      fecha_publicacion={p.fecha_publicacion}
                      tipoPropiedad={p.tipo_propiedad?.nombre}
                      estadoComercial={p.estado_comercial?.nombre}
                      estadoSituacion={p.estado_situacion}
                      estadoFisico={p.estado_fisico?.nombre}
                      ancho_m={p.ancho_m ?? undefined}
                      largo_m={p.largo_m ?? undefined}
                      antiguedad={p.antiguedad ?? undefined}
                      onClick={() => handlePropertyClick(p)}
                    />
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="text-gray-500 text-lg mb-4">
                    No se encontraron propiedades con los filtros seleccionados.
                  </div>
                  {currentFilters && (
                    <button 
                      onClick={() => handleFilter({})}
                      className="text-blue-600 hover:text-blue-800 text-sm font-medium underline hover:no-underline transition-colors"
                    >
                      Limpiar filtros
                    </button>
                  )}
                </div>
              )}
              {/* <div className="text-center mt-10">
                <button className="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 transition-colors">
                  Ver M√°s Propiedades
                </button>
              </div> */}
            </>
          ) : (
            <div className="text-center py-12">
              <div className="text-gray-500 text-lg mb-4">
                {currentFilters ? 'No se encontraron propiedades con los filtros seleccionados' : 'No hay propiedades disponibles'}
              </div>
              {currentFilters && (
                <button 
                  onClick={() => handleFilter({})}
                  className="text-blue-600 hover:text-blue-800 text-sm font-medium underline hover:no-underline transition-colors"
                >
                  Limpiar filtros
                </button>
              )}
            </div>
          )}
        </div>
      </section>

      {/* Modal de preview de propiedad */}
      <PropertyPreviewModal
        property={selectedProperty}
        isOpen={showPreview}
        onClose={() => setShowPreview(false)}
      />

      {/* Boost Section */}
      <TasacionesSection />

      {/* Explore Neighborhoods */}
      {/* <ExploreSection /> */}

      {/* Market Trends */}
      {/* <TrendsSection /> */}

      {/* Footer */}
      <Footer />
    </main>
  )
} 